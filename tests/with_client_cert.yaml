---
# Copyright (c) 2022 The ARA Records Ansible authors
# GNU General Public License v3.0+ (see COPYING or https://www.gnu.org/licenses/gpl-3.0.txt)

- name: Deploy and test ARA API with nginx, client certificates required
  hosts: ara-api-server
  gather_facts: yes
  vars_files:
    - vars/nginx_client_cert_tests.yaml
  pre_tasks:
    - become: true
      block:
        - name: "Set {{ ara_api_fqdn }} to 127.0.0.1"
          lineinfile:
            path: /etc/hosts
            line: "127.0.0.1 {{ ara_api_fqdn }}"

        - name: Ensure directory for SSL certificate and private key exists
          file:
            path: "{{ item | dirname }}"
            state: directory
            recurse: yes
          loop:
            - "{{ ara_api_frontend_ssl_key }}"
            - "{{ ara_api_frontend_ssl_cert }}"
            - "{{ ara_api_frontend_ssl_ca_key }}"
            - "{{ ara_api_frontend_ssl_ca_cert }}"
            - "{{ ara_api_key }}"
            - "{{ ara_api_cert }}"

        - name: Set path to openssl configuration files
          set_fact:
            _selfsigned_conf: "{{ ara_api_frontend_ssl_key | dirname }}/selfsigned.conf"
            _selfsigned_ext_conf: "{{ ara_api_frontend_ssl_key | dirname }}/selfsigned_ext.conf"

        # Generate a self-signed certificate over shell
        # community.crypto requires python cryptography to be installed (on the remote note)
        - name: Template the openssl configuration file for the CA
          copy:
            dest: "{{ _selfsigned_conf }}"
            content: |
              [ req ]
              default_bits       = 2048
              default_keyfile    = {{ ara_api_frontend_ssl_ca_key }}
              default_md         = sha256
              prompt             = no
              distinguished_name = distinguished_name
              x509_extensions    = v3_ca

              [ v3_ca ]
              basicConstraints       = CA:TRUE
              subjectKeyIdentifier   = hash
              authorityKeyIdentifier = keyid:always,issuer:always

              [ distinguished_name ]
              commonName             = ARA Test CA
              countryName            = CA
              stateOrProvinceName    = QC
              localityName           = Montreal
              organizationName       = ara
              organizationalUnitName = integration-tests

        - name: Generate the CA private key and self-signed certificate
          command: >-
            openssl req
            -x509
            -config {{ _selfsigned_conf }}
            -newkey rsa:2048
            -keyform PEM
            -out {{ ara_api_frontend_ssl_ca_cert }}
            -outform PEM
            -days 3650
            -nodes

        - name: Generate server certificate
          block:
            - name: Set vars for server certificate
              set_fact:
                _csr_file: "{{ ara_api_frontend_ssl_cert | regex_replace('.pem$', '.csr') }}"

            - name: Template the openssl configuration file
              copy:
                dest: "{{ _selfsigned_conf }}"
                content: |
                  [ req ]
                  default_bits       = 2048
                  default_keyfile    = {{ ara_api_frontend_ssl_key }}
                  default_md         = sha256
                  prompt             = no
                  distinguished_name = distinguished_name
                  x509_extensions    = v3_ca

                  [ v3_ca ]
                  basicConstraints       = critical,CA:FALSE
                  extendedKeyUsage       = critical,serverAuth
                  subjectKeyIdentifier   = hash
                  authorityKeyIdentifier = keyid:always,issuer:always

                  [ distinguished_name ]
                  commonName             = {{ ara_api_fqdn }}
                  countryName            = CA
                  stateOrProvinceName    = QC
                  localityName           = Montreal
                  organizationName       = ara
                  organizationalUnitName = integration-tests

            - name: Generate a CSR
              command: >-
                openssl req
                -config {{ _selfsigned_conf | quote }}
                -newkey rsa:2048
                -keyform PEM
                -out {{ _csr_file | quote }}
                -outform PEM
                -nodes

            - name: Template ext file
              copy:
                dest: "{{ _selfsigned_ext_conf }}"
                content: |
                  subjectAltName=DNS:{{ ara_api_fqdn }}

            - name: Sign the CSR with our CA
              command: >-
                openssl x509
                -req
                -in {{ _csr_file | quote }}
                -CA {{ ara_api_frontend_ssl_ca_cert | quote }}
                -CAkey {{ ara_api_frontend_ssl_ca_key }}
                -CAcreateserial
                -out {{ ara_api_frontend_ssl_cert | quote }}
                -extfile {{ _selfsigned_ext_conf | quote }}

        - name: Generate client certificate
          block:
            - name: Set vars for client certificate
              set_fact:
                _csr_file: "{{ ara_api_frontend_ssl_cert | regex_replace('.pem$', '.csr') }}"

            - name: Template the openssl configuration file
              copy:
                dest: "{{ _selfsigned_conf }}"
                content: |
                  [ req ]
                  default_bits       = 2048
                  default_keyfile    = {{ ara_api_key }}
                  default_md         = sha256
                  prompt             = no
                  distinguished_name = distinguished_name
                  x509_extensions    = v3_ca

                  [ v3_ca ]
                  basicConstraints       = critical,CA:FALSE
                  extendedKeyUsage       = critical,clientAuth
                  subjectKeyIdentifier   = hash
                  authorityKeyIdentifier = keyid:always,issuer:always

                  [ distinguished_name ]
                  commonName             = ARA API Client Cert
                  countryName            = CA
                  stateOrProvinceName    = QC
                  localityName           = Montreal
                  organizationName       = ara
                  organizationalUnitName = integration-tests

            - name: Generate a CSR
              command: >-
                openssl req
                -config {{ _selfsigned_conf | quote }}
                -newkey rsa:2048
                -keyform PEM
                -out {{ _csr_file | quote }}
                -outform PEM
                -nodes

            - name: Sign the CSR with our CA
              command: >-
                openssl x509
                -req
                -in {{ _csr_file | quote }}
                -CA {{ ara_api_frontend_ssl_ca_cert | quote }}
                -CAkey {{ ara_api_frontend_ssl_ca_key }}
                -CAcreateserial
                -out {{ ara_api_cert | quote }}

            # The private key is 0700 by default, do it for the purpose of testing from an unprivileged user
            - name: Grant read permissions to the private key
              file:
                path: "{{ ara_api_key }}"
                mode: 0744

  tasks:
    # TODO: Troubleshoot permission denied issues when running with gunicorn
    # https://github.com/ansible-community/ara-collection/issues/56
    - when: ansible_os_family == "RedHat"
      become: yes
      block:
        - name: Install python3-libselinux
          package:
            name: python3-libselinux
            state: present

        - name: Set selinux to permissive
          selinux:
            policy: targeted
            state: permissive

    - name: Set up the API with the ara_api Ansible role
      include_role:
        name: ara_api
        public: yes

    # These are tasks rather than a standalone playbook to give us an easy
    # access to all the variables within the same play.
    - include_tasks: test_tasks.yaml
